<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        .client-card {
            margin-bottom: 20px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            transition: transform 0.2s;
        }
        .client-card:hover {
            transform: translateY(-5px);
        }
        .client-header {
            background-color: #f8f9fa;
            padding: 15px;
            border-bottom: 1px solid #dee2e6;
        }
        .search-container {
            margin-bottom: 30px;
        }
        .modal-details {
            font-size: 1.1rem;
        }
        .modal-details dt {
            font-weight: 600;
            color: #495057;
        }
        .price-tag {
            background-color: #28a745;
            color: white;
            padding: 5px 10px;
            border-radius: 4px;
            font-weight: bold;
            display: inline-block;
            margin: 5px 0;
        }
        .bank-badge {
            background-color: #007bff;
            color: white;
            padding: 3px 8px;
            border-radius: 4px;
            font-size: 0.8em;
            margin-left: 10px;
        }
        .age-badge {
            background-color: #6c757d;
            color: white;
            padding: 3px 8px;
            border-radius: 4px;
            font-size: 0.8em;
            margin-left: 10px;
        }
        .instagram-link {
            color: #E1306C;
            text-decoration: none;
            font-size: 1.2rem;
            margin-left: 20px;
        }
        .instagram-link:hover {
            color: #C13584;
        }
        .header-container {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }
        .product-card {
            margin-bottom: 20px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            transition: transform 0.2s;
        }
        .product-card:hover {
            transform: translateY(-5px);
        }
        .product-image {
            height: 200px;
            object-fit: cover;
        }
        .btc-price {
            background-color: #f7931a;
            color: white;
            padding: 5px 10px;
            border-radius: 4px;
            font-weight: bold;
            display: inline-block;
            margin: 5px 0;
        }
        .usd-price {
            color: #6c757d;
            font-size: 0.9em;
        }
        .product-category {
            background-color: #6c757d;
            color: white;
            padding: 3px 8px;
            border-radius: 4px;
            font-size: 0.8em;
            margin-left: 10px;
        }
        .cart-icon {
            position: fixed;
            top: 20px;
            right: 20px;
            background-color: #f7931a;
            color: white;
            padding: 10px;
            border-radius: 50%;
            cursor: pointer;
            z-index: 1000;
        }
        .cart-badge {
            position: absolute;
            top: -5px;
            right: -5px;
            background-color: red;
            color: white;
            border-radius: 50%;
            padding: 2px 6px;
            font-size: 12px;
        }
        .category-filter {
            margin-bottom: 20px;
        }
        .category-btn {
            margin-right: 10px;
            margin-bottom: 10px;
        }
        .cart-item {
            border-bottom: 1px solid #dee2e6;
            padding: 10px 0;
        }
        .cart-total {
            font-weight: bold;
            font-size: 1.2em;
            margin-top: 20px;
        }
        .wishlist-icon {
            position: fixed;
            top: 20px;
            right: 80px;
            background-color: #dc3545;
            color: white;
            padding: 10px;
            border-radius: 50%;
            cursor: pointer;
            z-index: 1000;
        }
        .wishlist-badge {
            position: absolute;
            top: -5px;
            right: -5px;
            background-color: white;
            color: #dc3545;
            border-radius: 50%;
            padding: 2px 6px;
            font-size: 12px;
        }
        .rating {
            color: #ffc107;
            margin-bottom: 10px;
        }
        .rating-count {
            color: #6c757d;
            font-size: 0.9em;
        }
        .wishlist-item {
            border-bottom: 1px solid #dee2e6;
            padding: 10px 0;
        }
        .wishlist-total {
            font-weight: bold;
            font-size: 1.2em;
            margin-top: 20px;
        }
        .product-tags {
            margin-top: 10px;
        }
        .product-tag {
            background-color: #e9ecef;
            color: #495057;
            padding: 3px 8px;
            border-radius: 4px;
            font-size: 0.8em;
            margin-right: 5px;
            display: inline-block;
        }
        .user-icon {
            position: fixed;
            top: 20px;
            right: 140px;
            background-color: #007bff;
            color: white;
            padding: 10px;
            border-radius: 50%;
            cursor: pointer;
            z-index: 1000;
        }
        .recommendations-section {
            margin-top: 40px;
            padding-top: 20px;
            border-top: 2px solid #dee2e6;
        }
        .recommendations-title {
            font-size: 1.5em;
            margin-bottom: 20px;
            color: #495057;
        }
        .order-tracking {
            background-color: #f8f9fa;
            padding: 15px;
            border-radius: 5px;
            margin-top: 20px;
        }
        .order-status {
            display: flex;
            justify-content: space-between;
            margin-top: 10px;
        }
        .status-step {
            text-align: center;
            flex: 1;
            position: relative;
        }
        .status-step.active {
            color: #28a745;
        }
        .status-step.completed {
            color: #28a745;
        }
        .status-step::after {
            content: '';
            position: absolute;
            top: 10px;
            right: 0;
            width: 100%;
            height: 2px;
            background-color: #dee2e6;
            z-index: -1;
        }
        .status-step:last-child::after {
            display: none;
        }
        .status-dot {
            width: 20px;
            height: 20px;
            background-color: #dee2e6;
            border-radius: 50%;
            display: inline-block;
            margin-bottom: 5px;
        }
        .status-step.active .status-dot {
            background-color: #28a745;
        }
        .status-step.completed .status-dot {
            background-color: #28a745;
        }
        .login-form {
            max-width: 400px;
            margin: 0 auto;
            padding: 20px;
        }
        .user-menu {
            position: absolute;
            top: 50px;
            right: 0;
            background-color: white;
            border: 1px solid #dee2e6;
            border-radius: 5px;
            padding: 10px;
            min-width: 200px;
            display: none;
        }
        .user-menu.show {
            display: block;
        }
    </style>
</head>
<body>
    <div class="user-icon" onclick="toggleUserMenu()">
        <i class="fas fa-user"></i>
    </div>
    <div class="user-menu" id="userMenu">
        <div id="userMenuContent">
            <!-- User menu content will be loaded here -->
        </div>
    </div>
    <div class="wishlist-icon" onclick="toggleWishlist()">
        <i class="fas fa-heart"></i>
        <span class="wishlist-badge" id="wishlist-count">0</span>
    </div>
    <div class="cart-icon" onclick="toggleCart()">
        <i class="fas fa-shopping-cart"></i>
        <span class="cart-badge" id="cart-count">0</span>
    </div>

    <div class="container mt-4">
        <div class="header-container">
            <h1>Alibaba Products with Bitcoin Pricing</h1>
            <a href="https://www.instagram.com/" target="_blank" class="instagram-link">
                <i class="fab fa-instagram"></i> Follow us on Instagram
            </a>
        </div>
        
        <div class="category-filter">
            <button class="btn btn-outline-primary category-btn active" onclick="filterProducts('all')">All</button>
            <button class="btn btn-outline-primary category-btn" onclick="filterProducts('Electronics')">Electronics</button>
            <button class="btn btn-outline-primary category-btn" onclick="filterProducts('Audio')">Audio</button>
            <button class="btn btn-outline-primary category-btn" onclick="filterProducts('Wearables')">Wearables</button>
            <button class="btn btn-outline-primary category-btn" onclick="filterProducts('Computers')">Computers</button>
            <button class="btn btn-outline-primary category-btn" onclick="filterProducts('Transportation')">Transportation</button>
            <button class="btn btn-outline-primary category-btn" onclick="filterProducts('Home Automation')">Home Automation</button>
            <button class="btn btn-outline-primary category-btn" onclick="filterProducts('Drones')">Drones</button>
            <button class="btn btn-outline-primary category-btn" onclick="filterProducts('Virtual Reality')">Virtual Reality</button>
            <button class="btn btn-outline-primary category-btn" onclick="filterProducts('Fashion')">Fashion</button>
            <button class="btn btn-outline-primary category-btn" onclick="filterProducts('Sports')">Sports</button>
            <button class="btn btn-outline-primary category-btn" onclick="filterProducts('Toys')">Toys</button>
            <button class="btn btn-outline-primary category-btn" onclick="filterProducts('Health')">Health</button>
        </div>

        <div class="search-container">
            <div class="row">
                <div class="col-md-6">
                    <div class="input-group">
                        <input type="text" id="searchInput" class="form-control" placeholder="Search products...">
                        <button class="btn btn-outline-secondary" type="button" onclick="searchProducts()">
                            Search
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <div class="row" id="products-container">
            <!-- Products will be loaded here -->
        </div>

        <div class="recommendations-section" id="recommendations">
            <h3 class="recommendations-title">Recommended for You</h3>
            <div class="row" id="recommendations-container">
                <!-- Recommendations will be loaded here -->
            </div>
        </div>
    </div>

    <!-- Client Details Modal -->
    <div class="modal fade" id="clientModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Client Details</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <dl class="row modal-details">
                        <dt class="col-sm-3">Client ID</dt>
                        <dd class="col-sm-9" id="modal-client-id"></dd>
                        
                        <dt class="col-sm-3">Name</dt>
                        <dd class="col-sm-9" id="modal-name"></dd>
                        
                        <dt class="col-sm-3">Age</dt>
                        <dd class="col-sm-9" id="modal-age"></dd>
                        
                        <dt class="col-sm-3">Email</dt>
                        <dd class="col-sm-9" id="modal-email"></dd>
                        
                        <dt class="col-sm-3">Address</dt>
                        <dd class="col-sm-9" id="modal-address"></dd>
                        
                        <dt class="col-sm-3">Bank</dt>
                        <dd class="col-sm-9" id="modal-bank"></dd>
                        
                        <dt class="col-sm-3">Bank BIC</dt>
                        <dd class="col-sm-9" id="modal-bic"></dd>
                        
                        <dt class="col-sm-3">Bank Address</dt>
                        <dd class="col-sm-9" id="modal-bank-address"></dd>
                        
                        <dt class="col-sm-3">Bank State</dt>
                        <dd class="col-sm-9" id="modal-bank-state"></dd>

                        <dt class="col-sm-3">Pricing Details</dt>
                        <dd class="col-sm-9" id="modal-pricing"></dd>
                    </dl>
                </div>
            </div>
        </div>
    </div>

    <!-- Shopping Cart Modal -->
    <div class="modal fade" id="cartModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Shopping Cart</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div id="cart-items">
                        <!-- Cart items will be loaded here -->
                    </div>
                    <div class="cart-total">
                        Total: <span id="cart-total-btc">0</span> BTC
                        (<span id="cart-total-usd">0</span> USD)
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Continue Shopping</button>
                    <button type="button" class="btn btn-primary" onclick="checkout()">Checkout</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Wishlist Modal -->
    <div class="modal fade" id="wishlistModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Your Wishlist</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div id="wishlist-items">
                        <!-- Wishlist items will be loaded here -->
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Order Tracking Modal -->
    <div class="modal fade" id="orderTrackingModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Order Tracking</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div id="order-tracking-content">
                        <!-- Order tracking content will be loaded here -->
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Login Modal -->
    <div class="modal fade" id="loginModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Login / Register</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div class="login-form">
                        <div class="mb-3">
                            <label class="form-label">Email</label>
                            <input type="email" class="form-control" id="loginEmail">
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Password</label>
                            <input type="password" class="form-control" id="loginPassword">
                        </div>
                        <button class="btn btn-primary w-100" onclick="login()">Login</button>
                        <div class="text-center mt-3">
                            <a href="#" onclick="showRegisterForm()">Create new account</a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        let allClients = [];
        const clientModal = new bootstrap.Modal(document.getElementById('clientModal'));

        // Calculate price based on bank and age
        function calculatePrice(client) {
            let basePrice = 0;
            
            // Base price based on bank
            switch(client.Bank.toUpperCase()) {
                case 'WELLS FARGO BANK':
                    basePrice = 1000;
                    break;
                case 'SANTANDER BANK':
                    basePrice = 1200;
                    break;
                case 'BANK OF AMERICA':
                    basePrice = 1500;
                    break;
                case 'JPMORGAN CHASE':
                    basePrice = 2000;
                    break;
                case 'CITIBANK':
                    basePrice = 1800;
                    break;
                default:
                    basePrice = 1000;
            }

            // Age multiplier
            let ageMultiplier = 1;
            if (client.age < 25) {
                ageMultiplier = 1.2;
            } else if (client.age >= 25 && client.age < 40) {
                ageMultiplier = 1.5;
            } else if (client.age >= 40 && client.age < 60) {
                ageMultiplier = 1.8;
            } else {
                ageMultiplier = 2.0;
            }

            return Math.round(basePrice * ageMultiplier);
        }

        // Fetch and display clients
        async function loadClients() {
            try {
                const response = await fetch('/api/clients');
                allClients = await response.json();
                displayClients(allClients);
            } catch (error) {
                console.error('Error loading clients:', error);
            }
        }

        function displayClients(clients) {
            const container = document.getElementById('clients-container');
            container.innerHTML = '';
            
            clients.forEach(client => {
                const price = calculatePrice(client);
                const card = document.createElement('div');
                card.className = 'col-md-6 col-lg-4';
                card.innerHTML = `
                    <div class="card client-card">
                        <div class="client-header">
                            <h5 class="card-title">
                                ${client.first_name} ${client.last_name}
                                <span class="bank-badge">${client.Bank}</span>
                                <span class="age-badge">Age: ${client.age}</span>
                            </h5>
                        </div>
                        <div class="card-body">
                            <p class="card-text"><strong>Email:</strong> ${client.email}</p>
                            <div class="price-tag">$${price.toLocaleString()}</div>
                            <button class="btn btn-primary mt-2" onclick="viewClientDetails(${client.client_id})">
                                View Details
                            </button>
                        </div>
                    </div>
                `;
                container.appendChild(card);
            });
        }

        // Search functionality
        function searchClients() {
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();
            const filteredClients = allClients.filter(client => 
                client.first_name.toLowerCase().includes(searchTerm) ||
                client.last_name.toLowerCase().includes(searchTerm) ||
                client.email.toLowerCase().includes(searchTerm) ||
                client.Bank.toLowerCase().includes(searchTerm)
            );
            displayClients(filteredClients);
        }

        // View detailed client information
        async function viewClientDetails(clientId) {
            try {
                const response = await fetch(`/api/clients/${clientId}`);
                const client = await response.json();
                const price = calculatePrice(client);
                
                document.getElementById('modal-client-id').textContent = client.client_id;
                document.getElementById('modal-name').textContent = `${client.first_name} ${client.last_name}`;
                document.getElementById('modal-age').textContent = client.age;
                document.getElementById('modal-email').textContent = client.email;
                document.getElementById('modal-address').textContent = client.address;
                document.getElementById('modal-bank').textContent = client.Bank;
                document.getElementById('modal-bic').textContent = client['Bank swift BIC'];
                document.getElementById('modal-bank-address').textContent = client['Bank street address'];
                document.getElementById('modal-bank-state').textContent = client['Bank State code'];
                
                // Add pricing details
                const pricingDetails = `
                    <div class="price-tag">$${price.toLocaleString()}</div>
                    <div class="mt-2">
                        <strong>Pricing Breakdown:</strong><br>
                        Base Price (${client.Bank}): $${(price / (client.age < 25 ? 1.2 : client.age < 40 ? 1.5 : client.age < 60 ? 1.8 : 2.0)).toLocaleString()}<br>
                        Age Multiplier: ${client.age < 25 ? '1.2x' : client.age < 40 ? '1.5x' : client.age < 60 ? '1.8x' : '2.0x'}
                    </div>
                `;
                document.getElementById('modal-pricing').innerHTML = pricingDetails;
                
                clientModal.show();
            } catch (error) {
                console.error('Error fetching client details:', error);
            }
        }

        // Load clients when page loads
        document.addEventListener('DOMContentLoaded', loadClients);

        // Add event listener for Enter key in search
        document.getElementById('searchInput').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                searchClients();
            }
        });

        // Sample Alibaba products data
        const products = [
            {
                id: 1,
                name: "Smartphone X Pro",
                category: "Electronics",
                image: "https://example.com/smartphone.jpg",
                usdPrice: 499.99,
                description: "Latest smartphone with advanced features",
                supplier: "Shenzhen Tech Co.",
                minOrder: 10,
                shipping: "Free Shipping"
            },
            {
                id: 2,
                name: "Wireless Earbuds",
                category: "Audio",
                image: "https://example.com/earbuds.jpg",
                usdPrice: 89.99,
                description: "High-quality wireless earbuds",
                supplier: "Guangdong Audio Ltd",
                minOrder: 50,
                shipping: "Free Shipping"
            },
            {
                id: 3,
                name: "Smart Watch",
                category: "Wearables",
                image: "https://example.com/watch.jpg",
                usdPrice: 199.99,
                description: "Feature-rich smart watch",
                supplier: "Hangzhou Wearables",
                minOrder: 20,
                shipping: "Free Shipping"
            },
            {
                id: 4,
                name: "Laptop Pro",
                category: "Computers",
                image: "https://example.com/laptop.jpg",
                usdPrice: 1299.99,
                description: "High-performance laptop",
                supplier: "Shanghai Computing",
                minOrder: 5,
                shipping: "Free Shipping"
            },
            {
                id: 5,
                name: "4K Monitor",
                category: "Monitors",
                image: "https://example.com/monitor.jpg",
                usdPrice: 399.99,
                description: "27-inch 4K display",
                supplier: "Beijing Displays",
                minOrder: 15,
                shipping: "Free Shipping"
            },
            {
                id: 6,
                name: "Electric Scooter",
                category: "Transportation",
                image: "https://example.com/scooter.jpg",
                usdPrice: 299.99,
                description: "Foldable electric scooter",
                supplier: "Ningbo Mobility",
                minOrder: 30,
                shipping: "Free Shipping"
            },
            {
                id: 7,
                name: "Smart Home Kit",
                category: "Home Automation",
                image: "https://example.com/smarthome.jpg",
                usdPrice: 199.99,
                description: "Complete smart home solution",
                supplier: "Shenzhen Smart Home",
                minOrder: 25,
                shipping: "Free Shipping"
            },
            {
                id: 8,
                name: "Drone Pro",
                category: "Drones",
                image: "https://example.com/drone.jpg",
                usdPrice: 599.99,
                description: "Professional drone with 4K camera",
                supplier: "Dongguan Drones",
                minOrder: 10,
                shipping: "Free Shipping"
            },
            {
                id: 9,
                name: "VR Headset",
                category: "Virtual Reality",
                image: "https://example.com/vr.jpg",
                usdPrice: 299.99,
                description: "Immersive VR experience",
                supplier: "Shenzhen VR Tech",
                minOrder: 20,
                shipping: "Free Shipping"
            }
        ];

        // Real-time Bitcoin price
        let btcPriceInUsd = 50000;

        // Function to update Bitcoin price
        async function updateBitcoinPrice() {
            try {
                const response = await fetch('https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd');
                const data = await response.json();
                btcPriceInUsd = data.bitcoin.usd;
                displayProducts(); // Refresh product display with new price
            } catch (error) {
                console.error('Error fetching Bitcoin price:', error);
            }
        }

        // Update Bitcoin price every minute
        setInterval(updateBitcoinPrice, 60000);
        updateBitcoinPrice(); // Initial price fetch

        function displayProducts() {
            const container = document.getElementById('products-container');
            container.innerHTML = '';
            
            products.forEach(product => {
                const btcPrice = (product.usdPrice / btcPriceInUsd).toFixed(8);
                const card = document.createElement('div');
                card.className = 'col-md-6 col-lg-4';
                card.innerHTML = `
                    <div class="card product-card">
                        <img src="${product.image}" class="card-img-top product-image" alt="${product.name}">
                        <div class="card-body">
                            <h5 class="card-title">
                                ${product.name}
                                <span class="product-category">${product.category}</span>
                            </h5>
                            <p class="card-text">${product.description}</p>
                            <p class="card-text"><small class="text-muted">Supplier: ${product.supplier}</small></p>
                            <p class="card-text"><small class="text-muted">Min. Order: ${product.minOrder} units</small></p>
                            <p class="card-text"><small class="text-muted">${product.shipping}</small></p>
                            <div class="btc-price">${btcPrice} BTC</div>
                            <div class="usd-price">$${product.usdPrice.toFixed(2)} USD</div>
                            <button class="btn btn-primary mt-2" onclick="buyProduct(${product.id})">
                                Buy with Bitcoin
                            </button>
                        </div>
                    </div>
                `;
                container.appendChild(card);
            });
        }

        // Shopping cart functionality
        let cart = [];
        const cartModal = new bootstrap.Modal(document.getElementById('cartModal'));

        function addToCart(productId, quantity) {
            const product = products.find(p => p.id === productId);
            const existingItem = cart.find(item => item.id === productId);
            
            if (existingItem) {
                existingItem.quantity += quantity;
            } else {
                cart.push({
                    id: product.id,
                    name: product.name,
                    price: product.usdPrice,
                    quantity: quantity
                });
            }
            
            updateCart();
        }

        function removeFromCart(productId) {
            cart = cart.filter(item => item.id !== productId);
            updateCart();
        }

        function updateCart() {
            const cartItems = document.getElementById('cart-items');
            const cartCount = document.getElementById('cart-count');
            const cartTotalBtc = document.getElementById('cart-total-btc');
            const cartTotalUsd = document.getElementById('cart-total-usd');
            
            cartItems.innerHTML = '';
            let totalBtc = 0;
            let totalUsd = 0;
            
            cart.forEach(item => {
                const btcPrice = (item.price / btcPriceInUsd).toFixed(8);
                totalBtc += parseFloat(btcPrice) * item.quantity;
                totalUsd += item.price * item.quantity;
                
                cartItems.innerHTML += `
                    <div class="cart-item">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <h6>${item.name}</h6>
                                <small>${btcPrice} BTC ($${item.price.toFixed(2)} USD) × ${item.quantity}</small>
                            </div>
                            <button class="btn btn-danger btn-sm" onclick="removeFromCart(${item.id})">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </div>
                `;
            });
            
            cartCount.textContent = cart.length;
            cartTotalBtc.textContent = totalBtc.toFixed(8);
            cartTotalUsd.textContent = totalUsd.toFixed(2);
        }

        function toggleCart() {
            cartModal.show();
        }

        function checkout() {
            if (cart.length === 0) {
                alert('Your cart is empty!');
                return;
            }
            
            const totalBtc = parseFloat(document.getElementById('cart-total-btc').textContent);
            alert(`Proceeding to checkout with ${totalBtc} BTC total.`);
            // Here you would typically redirect to a payment processor
        }

        // Product filtering
        function filterProducts(category) {
            const buttons = document.querySelectorAll('.category-btn');
            buttons.forEach(btn => btn.classList.remove('active'));
            event.target.classList.add('active');
            
            const filteredProducts = category === 'all' 
                ? products 
                : products.filter(p => p.category === category);
            
            displayProducts(filteredProducts);
        }

        // Search functionality
        function searchProducts() {
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();
            const filteredProducts = products.filter(product => 
                product.name.toLowerCase().includes(searchTerm) ||
                product.description.toLowerCase().includes(searchTerm) ||
                product.category.toLowerCase().includes(searchTerm) ||
                product.supplier.toLowerCase().includes(searchTerm)
            );
            displayProducts(filteredProducts);
        }

        // Update buyProduct function to add to cart
        function buyProduct(productId) {
            const product = products.find(p => p.id === productId);
            const btcPrice = (product.usdPrice / btcPriceInUsd).toFixed(8);
            const modalContent = `
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Purchase ${product.name}</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <p>You are about to purchase ${product.name} for ${btcPrice} BTC ($${product.usdPrice.toFixed(2)} USD)</p>
                        <p>Minimum Order Quantity: ${product.minOrder} units</p>
                        <p>Supplier: ${product.supplier}</p>
                        <div class="input-group mb-3">
                            <input type="number" class="form-control" id="quantity" min="${product.minOrder}" value="${product.minOrder}">
                            <span class="input-group-text">units</span>
                        </div>
                        <div class="alert alert-info">
                            Total: <span id="total-btc">${(btcPrice * product.minOrder).toFixed(8)}</span> BTC
                            ($${(product.usdPrice * product.minOrder).toFixed(2)} USD)
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-primary" onclick="addToCartAndClose(${productId})">Add to Cart</button>
                    </div>
                </div>
            `;
            
            const modal = document.createElement('div');
            modal.className = 'modal fade';
            modal.id = 'purchaseModal';
            modal.innerHTML = modalContent;
            document.body.appendChild(modal);
            
            const purchaseModal = new bootstrap.Modal(modal);
            purchaseModal.show();
            
            document.getElementById('quantity').addEventListener('change', function(e) {
                const quantity = parseInt(e.target.value);
                const totalBtc = (btcPrice * quantity).toFixed(8);
                const totalUsd = (product.usdPrice * quantity).toFixed(2);
                document.getElementById('total-btc').textContent = totalBtc;
                document.querySelector('.alert').innerHTML = `
                    Total: ${totalBtc} BTC ($${totalUsd} USD)
                `;
            });
        }

        function addToCartAndClose(productId) {
            const quantity = parseInt(document.getElementById('quantity').value);
            addToCart(productId, quantity);
            
            const modal = bootstrap.Modal.getInstance(document.getElementById('purchaseModal'));
            modal.hide();
            
            cartModal.show();
        }

        // Load products when page loads
        document.addEventListener('DOMContentLoaded', displayProducts);

        // Additional product categories
        const additionalProducts = [
            {
                id: 10,
                name: "Smart Running Shoes",
                category: "Sports",
                image: "https://example.com/shoes.jpg",
                usdPrice: 129.99,
                description: "Advanced running shoes with smart tracking",
                supplier: "Guangzhou Sports",
                minOrder: 50,
                shipping: "Free Shipping",
                rating: 4.8,
                ratingCount: 125,
                tags: ["Smart", "Fitness", "Running"]
            },
            {
                id: 11,
                name: "Smart Backpack",
                category: "Fashion",
                image: "https://example.com/backpack.jpg",
                usdPrice: 89.99,
                description: "Anti-theft smart backpack with USB charging",
                supplier: "Shenzhen Fashion",
                minOrder: 30,
                shipping: "Free Shipping",
                rating: 4.5,
                ratingCount: 89,
                tags: ["Smart", "USB Charging", "Anti-theft"]
            },
            {
                id: 12,
                name: "Smart Jump Rope",
                category: "Sports",
                image: "https://example.com/jumprope.jpg",
                usdPrice: 39.99,
                description: "Smart jump rope with fitness tracking",
                supplier: "Dongguan Sports",
                minOrder: 100,
                shipping: "Free Shipping",
                rating: 4.7,
                ratingCount: 67,
                tags: ["Fitness", "Smart", "Exercise"]
            },
            {
                id: 13,
                name: "Smart Water Bottle",
                category: "Health",
                image: "https://example.com/bottle.jpg",
                usdPrice: 49.99,
                description: "Smart water bottle with hydration tracking",
                supplier: "Ningbo Health",
                minOrder: 40,
                shipping: "Free Shipping",
                rating: 4.6,
                ratingCount: 112,
                tags: ["Health", "Smart", "Hydration"]
            },
            {
                id: 14,
                name: "Smart RC Car",
                category: "Toys",
                image: "https://example.com/rccar.jpg",
                usdPrice: 79.99,
                description: "Smart RC car with app control",
                supplier: "Shenzhen Toys",
                minOrder: 60,
                shipping: "Free Shipping",
                rating: 4.4,
                ratingCount: 78,
                tags: ["RC", "Smart", "Toys"]
            }
        ];

        // Add new products to existing products array
        products.push(...additionalProducts);

        // Wishlist functionality
        let wishlist = [];
        const wishlistModal = new bootstrap.Modal(document.getElementById('wishlistModal'));

        function toggleWishlist() {
            wishlistModal.show();
        }

        function addToWishlist(productId) {
            const product = products.find(p => p.id === productId);
            if (!wishlist.find(item => item.id === productId)) {
                wishlist.push({
                    id: product.id,
                    name: product.name,
                    price: product.usdPrice,
                    image: product.image
                });
                updateWishlist();
            }
        }

        function removeFromWishlist(productId) {
            wishlist = wishlist.filter(item => item.id !== productId);
            updateWishlist();
        }

        function updateWishlist() {
            const wishlistItems = document.getElementById('wishlist-items');
            const wishlistCount = document.getElementById('wishlist-count');
            
            wishlistItems.innerHTML = '';
            wishlistCount.textContent = wishlist.length;
            
            wishlist.forEach(item => {
                const btcPrice = (item.price / btcPriceInUsd).toFixed(8);
                wishlistItems.innerHTML += `
                    <div class="wishlist-item">
                        <div class="d-flex justify-content-between align-items-center">
                            <div class="d-flex align-items-center">
                                <img src="${item.image}" style="width: 50px; height: 50px; object-fit: cover; margin-right: 10px;">
                                <div>
                                    <h6>${item.name}</h6>
                                    <small>${btcPrice} BTC ($${item.price.toFixed(2)} USD)</small>
                                </div>
                            </div>
                            <div>
                                <button class="btn btn-primary btn-sm" onclick="buyProduct(${item.id})">
                                    <i class="fas fa-shopping-cart"></i>
                                </button>
                                <button class="btn btn-danger btn-sm" onclick="removeFromWishlist(${item.id})">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                `;
            });
        }

        // Update displayProducts function to include ratings and tags
        function displayProducts(productsToShow = products) {
            const container = document.getElementById('products-container');
            container.innerHTML = '';
            
            productsToShow.forEach(product => {
                const btcPrice = (product.usdPrice / btcPriceInUsd).toFixed(8);
                const stars = '★'.repeat(Math.floor(product.rating)) + '☆'.repeat(5 - Math.floor(product.rating));
                const tags = product.tags ? product.tags.map(tag => `<span class="product-tag">${tag}</span>`).join('') : '';
                
                const card = document.createElement('div');
                card.className = 'col-md-6 col-lg-4';
                card.innerHTML = `
                    <div class="card product-card">
                        <img src="${product.image}" class="card-img-top product-image" alt="${product.name}">
                        <div class="card-body">
                            <h5 class="card-title">
                                ${product.name}
                                <span class="product-category">${product.category}</span>
                            </h5>
                            <div class="rating">
                                ${stars}
                                <span class="rating-count">(${product.ratingCount})</span>
                            </div>
                            <p class="card-text">${product.description}</p>
                            <div class="product-tags">${tags}</div>
                            <p class="card-text"><small class="text-muted">Supplier: ${product.supplier}</small></p>
                            <p class="card-text"><small class="text-muted">Min. Order: ${product.minOrder} units</small></p>
                            <p class="card-text"><small class="text-muted">${product.shipping}</small></p>
                            <div class="btc-price">${btcPrice} BTC</div>
                            <div class="usd-price">$${product.usdPrice.toFixed(2)} USD</div>
                            <div class="d-flex justify-content-between mt-2">
                                <button class="btn btn-primary" onclick="buyProduct(${product.id})">
                                    Buy with Bitcoin
                                </button>
                                <button class="btn btn-outline-danger" onclick="addToWishlist(${product.id})">
                                    <i class="fas fa-heart"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                `;
                container.appendChild(card);
            });
        }

        // User account functionality
        let currentUser = null;
        const loginModal = new bootstrap.Modal(document.getElementById('loginModal'));
        const orderTrackingModal = new bootstrap.Modal(document.getElementById('orderTrackingModal'));

        function toggleUserMenu() {
            const menu = document.getElementById('userMenu');
            menu.classList.toggle('show');
        }

        function updateUserMenu() {
            const menuContent = document.getElementById('userMenuContent');
            if (currentUser) {
                menuContent.innerHTML = `
                    <div class="mb-2">Welcome, ${currentUser.name}</div>
                    <button class="btn btn-outline-primary btn-sm w-100 mb-2" onclick="showOrderTracking()">
                        Track Orders
                    </button>
                    <button class="btn btn-outline-danger btn-sm w-100" onclick="logout()">
                        Logout
                    </button>
                `;
            } else {
                menuContent.innerHTML = `
                    <button class="btn btn-primary btn-sm w-100" onclick="showLoginModal()">
                        Login / Register
                    </button>
                `;
            }
        }

        function showLoginModal() {
            loginModal.show();
        }

        function login() {
            const email = document.getElementById('loginEmail').value;
            const password = document.getElementById('loginPassword').value;
            
            // In a real application, this would be an API call
            currentUser = {
                id: 1,
                name: email.split('@')[0],
                email: email
            };
            
            loginModal.hide();
            updateUserMenu();
            loadRecommendations();
        }

        function logout() {
            currentUser = null;
            updateUserMenu();
            document.getElementById('recommendations').style.display = 'none';
        }

        // Order tracking
        function showOrderTracking() {
            if (!currentUser) {
                showLoginModal();
                return;
            }
            
            const trackingContent = document.getElementById('order-tracking-content');
            trackingContent.innerHTML = `
                <div class="order-tracking">
                    <h5>Order #12345</h5>
                    <div class="order-status">
                        <div class="status-step completed">
                            <div class="status-dot"></div>
                            <div>Ordered</div>
                        </div>
                        <div class="status-step active">
                            <div class="status-dot"></div>
                            <div>Processing</div>
                        </div>
                        <div class="status-step">
                            <div class="status-dot"></div>
                            <div>Shipped</div>
                        </div>
                        <div class="status-step">
                            <div class="status-dot"></div>
                            <div>Delivered</div>
                        </div>
                    </div>
                </div>
            `;
            
            orderTrackingModal.show();
        }

        // Product recommendations
        function loadRecommendations() {
            if (!currentUser) return;
            
            const recommendationsContainer = document.getElementById('recommendations-container');
            recommendationsContainer.innerHTML = '';
            
            // In a real application, this would be based on user's browsing history and preferences
            const recommendedProducts = products
                .sort(() => Math.random() - 0.5)
                .slice(0, 3);
            
            recommendedProducts.forEach(product => {
                const btcPrice = (product.usdPrice / btcPriceInUsd).toFixed(8);
                const stars = '★'.repeat(Math.floor(product.rating)) + '☆'.repeat(5 - Math.floor(product.rating));
                
                recommendationsContainer.innerHTML += `
                    <div class="col-md-4">
                        <div class="card product-card">
                            <img src="${product.image}" class="card-img-top product-image" alt="${product.name}">
                            <div class="card-body">
                                <h5 class="card-title">${product.name}</h5>
                                <div class="rating">${stars}</div>
                                <div class="btc-price">${btcPrice} BTC</div>
                                <button class="btn btn-primary mt-2" onclick="buyProduct(${product.id})">
                                    Buy with Bitcoin
                                </button>
                            </div>
                        </div>
                    </div>
                `;
            });
            
            document.getElementById('recommendations').style.display = 'block';
        }

        // Update displayProducts to include user-specific features
        function displayProducts(productsToShow = products) {
            // ... existing displayProducts code ...
            
            // Add user-specific features
            if (currentUser) {
                loadRecommendations();
            }
        }

        // Initialize user menu
        updateUserMenu();
    </script>
</body>
</html> 